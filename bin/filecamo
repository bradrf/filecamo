#!/usr/bin/env ruby

require_relative '../lib/filecamo'

BN = File.basename($0, '.rb')
usage = "usage: ${BN} [--debug]"

logger = Logger.new($stdout)
logger.level = ARGV.delete('--debug') ? Logger::DEBUG : Logger::INFO

cmd = ARGV.shift
if cmd == 'gen'
  if i = ARGV.index('-d')
    ARGV.delete_at(i)
    dst_path = ARGV.delete_at(i)
  end

  if ARGV.size  < 2
    bin, bm = BetterBytes::BINARY
    dec, dm = BetterBytes::DECIMAL
    
    $stderr.puts <<EOF

#{usage} gen [-d <destination_path>] <minimum_size> <maximum_size> <count> <depth> [<percent_text>]

     The size MAY end with a unit label:
       * BINARY labels (#{bm} multiplier):  #{bin.join(', ')}
       * DECIMAL labels (#{dm} multiplier): #{dec.join(', ')}

     The count will determine the number of files to generate.

     The depth will determine the hierarchy of the files. The number of files will be randomly
     distributed among the tree.

     The percent text optional value indicates how many files should be text instead of binary.
     Default is none (i.e. all files have random binary content).

EOF
    exit 1
  end

  min, max, count, depth, percent_text = ARGV
  generator = Filecamo::Generator.new(logger: logger)
  generator.generate(min, max, count, depth,
                     percent_text: percent_text, destination_path: dst_path) do |path, len|
    puts "#{BetterBytes.humanize(len, precision: 6.1)} => #{path}"
  end
  msg_len = 0
  generator.wait do |txt_count, bin_count|
    msg = "\rWaiting for #{txt_count} txt and #{bin_count} bin jobs to complete..."
    $stdout.printf(msg + (' ' * msg_len))
    $stdout.flush
    msg_len = msg.size
  end
  $stdout.printf("\r" + (' ' * msg_len) + "\r")
  generator.kill
  puts generator.stats

elsif cmd == 'muck'
  if ARGV.size < 3
    $stderr.puts <<EOF

#{usage} muck <percent_select> <percent_change> <path> [<path>...]

     The percent select should be a value from 1 to 100 indicating how likely a given file will be
     modified.

     The percent change should be a value from 1 to 100 indicating (roughly) how many lines should
     be added.

     Paths can be filenames or directories to recurse and will be descended breadth-first. Any file
     entry starting with '.' is skipped (ignored).

EOF
    exit 1
  end

  percent_select, percent_change, *paths = ARGV
  mucker = Filecamo::TextMucker.new(" #{BN}: ", logger: logger)
  mucker.muck(percent_select, percent_change, paths) do |fn, lang, line_nums|
    puts "Modified #{fn} (#{lang}): #{line_nums.join(',')}"
  end
  puts mucker.stats

else
  $stderr.puts <<EOF

#{usage} { gen | muck } ...

EOF
  exit 1
end
